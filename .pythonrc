# vim:ft=python
# sources:
# http://igotgenes.blogspot.com/2009/01/tab-completion-and-history-in-python.html
# http://stackoverflow.com/questions/675370/tab-completion-in-python-interpreter-in-os-x-terminal
import atexit
import os.path
import sys

try:
    import readline
except ImportError:
    try:
        import pyreadline as readline
    except:
        pass
else:
    import rlcompleter

    class IrlCompleter(rlcompleter.Completer):
        """
        This class enables a "tab" insertion if there's no text for
        completion.

        The default "tab" is four spaces. You can initialize with '\t' as
        the tab if you wish to use a genuine tab.

        """

        def __init__(self, tab='    '):
            self.tab = tab
            rlcompleter.Completer.__init__(self)


        def complete(self, text, state):
            if text == '':
                readline.insert_text(self.tab)
                return None
            else:
                return rlcompleter.Completer.complete(self,text,state)


    #you could change this line to bind another key instead tab.
    if (sys.platform == 'darwin'):
        readline.parse_and_bind('bind ^I rl_complete')
    else:
        readline.parse_and_bind('tab: complete')
    readline.set_completer(IrlCompleter().complete)


# Restore our command-line history, and save it when Python exits.
history_path = os.path.expanduser('~/.pyhistory')
if os.path.isfile(history_path):
    readline.read_history_file(history_path)
readline.set_history_length(100)
atexit.register(lambda x=history_path: readline.write_history_file(x))
